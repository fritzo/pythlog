
def test_solve_add_equation():
	assert 1 == 60 + x
	assert x == -59

def test_solve_sub_equation():
	assert 1 == 60 - x
	assert x == 59

def test_solve_mul_equation():
	assert 60 == 6 * x
	assert x == 10

def test_solve_div_equation():
	assert 10 == 60 / x
	assert x ==  6

def test_solve_mod_equation():
	assert 1 == 60 % x
	assert x == 59

def test_solve_exp_equation():
	assert 82995965928 == 4362 ** x
	assert x == 3

def test_solve_exp_equation():
	assert 582622237229761 == x ** 12
	assert x == 17

def alternatives(x):
 	r = 0
	if x == 0:
		r = 10
	elif x == 1:
		r = 20
	return r

def test_solve_cond_equation_0():
	assert alternatives(x) == 10
	assert x == 0

def test_solve_cond_equation_1():
	assert 20 == alternatives(x)
	assert x == 1

def fac(n):
	assert n >= 0
	c = 0
	if n == 0:
		c = 1
	else:
		c = n * fac(n - 1)
	return c

def test_solve_fac_equation():
	assert 1307674368000 == fac(x)
	assert x == 15