# Python dicts are implemented as association list in Pythlog. Association
# list are ordered which means that the non-determinism of Python dicts does
# not exists in Pythlog. Bug or feature?

def test_dict_length():
	assert len({}) == 0
	assert len({1:2}) == 1
	assert len({1:2, 1:2, 2:3}) == 2

def test_dict_equal():
	assert {} == {}
	assert {1:1} == {1:1}
	assert {1:1, 1:2, 2:2} == {1:2, 2:2}
	assert {1:2, 1:1, 2:2} == {1:1, 2:2}
	assert not {1:1} == {}

def test_dict_not_equal():
	assert {1:1} != {}
	assert {} != {2:2}
	assert {1:1} != {1:1, 1:2}
	assert not {} != {}
	assert not {1:1} != {1:2, 1:1}

def test_dict_read_element():
	d = {1:2, "1":"2"}
	assert d[1] == 2
	assert d["1"] == "2"

def test_dict_get_keys():
	d = {"abc":1, 2:"def"}
	assert d.keys() == [2, "abc"] # Associations list are ordered

def test_dict_get_values():
	d = {"abc":1, 2:"def"}
	assert d.values() == ["def", 1] # Associations list are ordered

def test_dict_in_operator():
	d = {"a":1, "b":2}
	assert "a" in d
	assert "b" in d
	assert not 1 in d

def test_dict_to_string():
	assert str({1:"a"}) == "{1:'a'}"
	assert str({}) == "{}"

def test_dict_construct_with_free_variables_as_values():
	x, y = free
	d = {1:x, 2:y}
	assert d[1] == 10
	assert d[2] == 30
	assert str(d) == "{1:10, 2:30}"

def test_dict_index_using_free_variable():
	k = free
	d = {1:"a", 2:"b", 3:"a"}
	assert d[k] == "a"
	assert str(k) == "3"

def test_dict_index_using_free_variable_and_pattern_match_value():
	k = free
	d = {1:"abc", 2:"b", 3:"abcd"}
	assert "b" in d[k]
	assert len(d[k]) == 3
	assert str(k) == "1"

class Foo:
	def __init__(self, a, b):
		self.a = a
		self.b = b

def test_dict_construct_values_from_asserts():
	x, y, k = free
	d = {1:x, 2:y}
	assert x.a == y.b
	assert x.b == y.a
	assert x.a == 10
	assert y.a == 20
	assert str(d) == "{1:Foo(10, 20), 2:Foo(20, 10)}"